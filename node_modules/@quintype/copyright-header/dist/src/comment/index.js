"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeLanguageSyntaxFromComment = exports.frameCopyrightHeader = exports.isCommentCopyright = exports.clearComment = exports.appendComment = void 0;
const common_1 = require("../utils/common");
const config_1 = require("../config");
const removeLanguageSyntaxFromComment = (text, commentSyntax) => {
    for (const syntax of commentSyntax) {
        text = text.replace(syntax, '');
    }
    return text;
};
exports.removeLanguageSyntaxFromComment = removeLanguageSyntaxFromComment;
const appendComment = (existingComment, text, commentSyntax = []) => {
    const formattedText = commentSyntax.length > 0 ? removeLanguageSyntaxFromComment(text, commentSyntax) : text;
    if (existingComment.raw === '') {
        existingComment.raw = text;
    }
    else {
        existingComment.raw += `\n${text}`;
    }
    if (!commentSyntax.includes(text.trim())) {
        if (existingComment.formatted === '') {
            existingComment.formatted = formattedText;
        }
        else {
            existingComment.formatted += `\n${formattedText}`;
        }
    }
    return existingComment;
};
exports.appendComment = appendComment;
const clearComment = (comment) => {
    comment.formatted = '';
    comment.raw = '';
};
exports.clearComment = clearComment;
const isCommentCopyright = (comment) => {
    const formattedComment = comment.toLowerCase();
    for (const keyword of config_1.COPYRIGHT_KEYWORDS) {
        if (formattedComment.includes(keyword)) {
            return true;
        }
    }
    return false;
};
exports.isCommentCopyright = isCommentCopyright;
const frameCopyrightHeader = (copyrightHeader, programmingLanguage) => {
    const copyrightFormattedLines = common_1.splitIntoLines(copyrightHeader.comment.formatted);
    const filteredCopyrightLines = copyrightFormattedLines.filter((line, index) => copyrightFormattedLines[index].length > 0);
    const filteredCopyright = filteredCopyrightLines.join('\n');
    let copyright = '';
    if (copyrightFormattedLines.length === 1) {
        // If copyright is only one line, give priority to single line comment
        if (programmingLanguage.commentSyntax.singleLine) {
            // And programming language supports single line comment
            copyright = `${programmingLanguage.commentSyntax.singleLine.start}${filteredCopyright}`;
        }
        else if (programmingLanguage.commentSyntax.multiLine) {
            // And programming language does not support single line and only multi line
            copyright =
                programmingLanguage.commentSyntax.multiLine.start + '\n' + filteredCopyright + '\n' + ` ${programmingLanguage.commentSyntax.multiLine.end}`;
        }
    }
    else {
        // If copyright has multiple lines, give priority to multi line
        if (programmingLanguage.commentSyntax.multiLine) {
            // And programming language supports multi line comment
            copyright =
                programmingLanguage.commentSyntax.multiLine.start + '\n' + filteredCopyright + '\n' + ` ${programmingLanguage.commentSyntax.multiLine.end}`;
        }
        else if (programmingLanguage.commentSyntax.singleLine) {
            // And programming language does not support multi line and only single line
            copyright = filteredCopyrightLines.map((line) => `${programmingLanguage.commentSyntax.singleLine.start}${line}`).join('\n');
        }
    }
    const numberOfEmptyLinesToAdd = copyrightFormattedLines.filter((line) => line.length === 0);
    copyright += numberOfEmptyLinesToAdd.map(() => '\n').join('');
    return copyright;
};
exports.frameCopyrightHeader = frameCopyrightHeader;
//# sourceMappingURL=index.js.map
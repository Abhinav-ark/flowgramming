"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkFileExists = exports.readFile = exports.appendTextToFileBegining = exports.replaceTextInFile = exports.getFileExtension = void 0;
const path_1 = __importDefault(require("path"));
const replace_in_file_1 = __importDefault(require("replace-in-file"));
const fs_1 = __importStar(require("fs"));
const getFileExtension = (filePath) => {
    return path_1.default.extname(filePath).replace(/[^a-zA-Z]/g, '');
};
exports.getFileExtension = getFileExtension;
const replaceTextInFile = (filePath, from, to) => {
    return replace_in_file_1.default.replaceInFile({
        files: filePath,
        from,
        to
    });
};
exports.replaceTextInFile = replaceTextInFile;
const appendTextToFileBegining = (filePath, text) => {
    let fileContent = fs_1.readFileSync(filePath, 'utf8');
    fileContent = text + '\n' + fileContent;
    fs_1.writeFileSync(filePath, fileContent);
};
exports.appendTextToFileBegining = appendTextToFileBegining;
const readFile = (filePath) => {
    return fs_1.readFileSync(filePath, 'utf8');
};
exports.readFile = readFile;
const checkFileExists = (filePath) => {
    return fs_1.default.existsSync(filePath);
};
exports.checkFileExists = checkFileExists;
//# sourceMappingURL=file.js.map
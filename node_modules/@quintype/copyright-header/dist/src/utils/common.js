"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizePath = exports.executeJSExpression = exports.LinePatternPosition = exports.matchLinePattern = exports.splitIntoLines = void 0;
const vm_1 = __importDefault(require("vm"));
const sanitizePath = (path) => {
    return path
        .split(' ')
        .filter((filePath) => filePath.length > 0)
        .map((filePath) => filePath.trim());
};
exports.sanitizePath = sanitizePath;
const splitIntoLines = (text) => {
    return text.split(/\r?\n/);
};
exports.splitIntoLines = splitIntoLines;
var LinePatternPosition;
(function (LinePatternPosition) {
    LinePatternPosition["STARTS_WITH"] = "STARTS_WITH";
    LinePatternPosition["ENDS_WITH"] = "ENDS_WITH";
})(LinePatternPosition || (LinePatternPosition = {}));
exports.LinePatternPosition = LinePatternPosition;
const matchLinePattern = (line, patterns, position) => {
    const formattedLine = line.trim();
    for (const prefix of patterns) {
        if (position === LinePatternPosition.STARTS_WITH && formattedLine.startsWith(prefix)) {
            return true;
        }
        else if (position === LinePatternPosition.ENDS_WITH && formattedLine.endsWith(prefix)) {
            return true;
        }
    }
    return false;
};
exports.matchLinePattern = matchLinePattern;
const executeJSExpression = (expression) => {
    const context = { expression, result: '' };
    const code = 'result = `' + expression + '`';
    vm_1.default.runInNewContext(code, context);
    return context.result;
};
exports.executeJSExpression = executeJSExpression;
//# sourceMappingURL=common.js.map
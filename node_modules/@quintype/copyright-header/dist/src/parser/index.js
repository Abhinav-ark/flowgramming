"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
const file_1 = require("../utils/file");
const config_1 = require("../config");
const error_1 = __importDefault(require("../error"));
const comment_1 = require("../comment");
const language_1 = require("../language");
const common_1 = require("../utils/common");
const frameResult = (comment, startLineNumber, endLineNumber, language, filePath, fileExtension) => ({
    lineNumber: { start: startLineNumber, end: endLineNumber },
    comment,
    language,
    file: {
        path: filePath,
        extension: fileExtension
    }
});
const findCopyrightHeader = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    var e_1, _a;
    // Get comment syntax based on file extension
    const fileExtensionLanguageMap = language_1.populateFileExtensionCommentSyntaxMap();
    const fileExtension = file_1.getFileExtension(filePath);
    const language = fileExtensionLanguageMap.get(fileExtension);
    if (!language) {
        throw Error(`code: ${error_1.default.UNSUPPORTED_FILE_EXTENSION}, message: No comment syntax available for file extension '${fileExtension}`);
    }
    const commentSyntax = language.commentSyntax;
    // Intialize copyright header
    let copyrightHeader = frameResult(null, null, null, language, filePath, fileExtension);
    const comment = {
        formatted: '',
        raw: ''
    };
    const readingComment = {
        singleLine: false,
        multiLine: false
    };
    let lineNumber = 0;
    let startLineNumber = 0;
    // Read file line by line to find copyright header
    const rl = readline_1.default.createInterface({
        input: fs_1.default.createReadStream(filePath),
        crlfDelay: Infinity
    });
    try {
        for (var rl_1 = __asyncValues(rl), rl_1_1; rl_1_1 = yield rl_1.next(), !rl_1_1.done;) {
            const line = rl_1_1.value;
            lineNumber++;
            // If current line number crosses limit in config then stop parser
            if (lineNumber > config_1.LINE_READER_LIMIT && !readingComment.singleLine && !readingComment.multiLine) {
                break;
            }
            const isEmptyLine = line.length === 0;
            if (!copyrightHeader.comment && !readingComment.singleLine && commentSyntax.multiLine) {
                if (common_1.matchLinePattern(line, commentSyntax.multiLine.start, common_1.LinePatternPosition.STARTS_WITH)) {
                    if (!readingComment.multiLine) {
                        // Start of a multi line comment
                        startLineNumber = lineNumber;
                        readingComment.multiLine = true;
                    }
                    comment_1.appendComment(comment, line, commentSyntax.multiLine.start);
                    continue;
                }
                else if (common_1.matchLinePattern(line, commentSyntax.multiLine.end, common_1.LinePatternPosition.ENDS_WITH)) {
                    // End of multi line comment
                    readingComment.multiLine = false;
                    comment_1.appendComment(comment, line, commentSyntax.multiLine.end);
                    if (comment_1.isCommentCopyright(comment.formatted)) {
                        copyrightHeader = frameResult(comment, startLineNumber, lineNumber, language, filePath, fileExtension);
                    }
                    else {
                        comment_1.clearComment(comment);
                    }
                    continue;
                }
                else if (readingComment.multiLine) {
                    // Reading multi line comment
                    comment_1.appendComment(comment, line);
                    continue;
                }
            }
            if (!copyrightHeader.comment && !readingComment.multiLine && commentSyntax.singleLine) {
                if (common_1.matchLinePattern(line, commentSyntax.singleLine.start, common_1.LinePatternPosition.STARTS_WITH)) {
                    // Start of a single line comment
                    comment_1.appendComment(comment, line, commentSyntax.singleLine.start);
                    if (!readingComment.singleLine) {
                        startLineNumber = lineNumber;
                        readingComment.singleLine = true;
                    }
                    continue;
                }
                else if (readingComment.singleLine && !common_1.matchLinePattern(line, commentSyntax.singleLine.start, common_1.LinePatternPosition.STARTS_WITH)) {
                    // End of single line comment
                    readingComment.singleLine = false;
                    if (comment_1.isCommentCopyright(comment.formatted)) {
                        if (isEmptyLine) {
                            // If current line is empty, then add to the header comment
                            comment_1.appendComment(comment, line);
                            copyrightHeader = frameResult(comment, startLineNumber, lineNumber, language, filePath, fileExtension);
                        }
                        else {
                            copyrightHeader = frameResult(comment, startLineNumber, lineNumber - 1, language, filePath, fileExtension);
                            break;
                        }
                    }
                    else {
                        comment_1.clearComment(comment);
                    }
                    continue;
                }
            }
            // Add empty lines after copyright header as a part of comment
            if (isEmptyLine) {
                if (copyrightHeader.comment) {
                    comment_1.appendComment(comment, line);
                    copyrightHeader = frameResult(comment, startLineNumber, lineNumber, language, filePath, fileExtension);
                }
            }
            else {
                // If none of above conditions matches and not an empty line, then break
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (rl_1_1 && !rl_1_1.done && (_a = rl_1.return)) yield _a.call(rl_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // If still reading a comment, then check if the comment so far contains copyright
    if ((readingComment.singleLine || readingComment.multiLine) && comment_1.isCommentCopyright(comment.formatted)) {
        copyrightHeader = frameResult(comment, startLineNumber, lineNumber, language, filePath, fileExtension);
    }
    return copyrightHeader;
});
exports.default = findCopyrightHeader;
//# sourceMappingURL=index.js.map